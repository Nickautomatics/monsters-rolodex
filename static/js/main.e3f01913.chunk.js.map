{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAKL,EAAMG,QAAQG,OAC/F,6BAAKN,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCHbC,EAAW,SAACR,GACrB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJlBO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOC,KAAK,SACLb,UAAU,SACVW,YAAaA,EACbG,SAAUF,MCkCNG,G,wDAnCf,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAW,GACXS,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,oBAG9C,WAAU,IAAD,SAE2BE,KAAKR,MAA/BR,EAFD,EAECA,SAAUS,EAFX,EAEWA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAlB,GAAQ,OAC7CA,EAASH,KAAKsB,cAAcC,SAASX,EAAYU,kBAGrD,OACE,sBAAK3B,UAAU,MAAf,UACI,iDACF,cAAC,EAAD,CAAWa,KAAK,SACTF,YAAY,kBACZC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAC/D,cAAC,EAAD,CAAUvB,SAAUiB,W,GA7BRO,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e3f01913.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt={props.monster.name}/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)\r\n\r\n","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardList = (props) => {\r\n    return <div className='card-list'>\r\n        {props.monsters.map(monster =>(\r\n            <Card key={monster.id} monster={monster}/>\r\n        ))}\r\n    </div>\r\n}","import React from \"react\";\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input type='search'\r\n           className='search'\r\n           placeholder={placeholder}\r\n           onChange={handleChange}/>\r\n)","import React , { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport './App.css';\n\nclass App extends Component {\nconstructor() {\n  super();\n\n  this.state = {\n    monsters : [],\n    searchField: ''\n  }\n}\n\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}))\n}\n\nrender() {\n\n  const { monsters, searchField } = this.state;\n  const filteredMonsters = monsters.filter(monsters =>\n      monsters.name.toLowerCase().includes(searchField.toLowerCase())\n  )\n\n  return(\n    <div className='App'>\n        <h1>Monster Rolodex</h1>\n      <SearchBox type='search'\n             placeholder='search monsters'\n             handleChange={e => this.setState({searchField: e.target.value})}/>\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}